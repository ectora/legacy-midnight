// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "ServiceProtocolBuffers.proto" (package "com.yonakaps.package", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.yonakaps.package.GetDbGateOperationalDataReq
 */
export interface GetDbGateOperationalDataReq {
    /**
     * @generated from protobuf field: bool list_service_infos = 1;
     */
    listServiceInfos: boolean;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetDbGateOperationalDataRsp
 */
export interface GetDbGateOperationalDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
    /**
     * @generated from protobuf field: bool db_connected = 2;
     */
    dbConnected: boolean;
    /**
     * @generated from protobuf field: uint32 connected_service_count = 3;
     */
    connectedServiceCount: number;
    /**
     * @generated from protobuf field: repeated com.yonakaps.package.ServiceBasicInfo service_infos = 4;
     */
    serviceInfos: ServiceBasicInfo[];
    /**
     * @generated from protobuf field: uint32 total_queries_performed = 5;
     */
    totalQueriesPerformed: number;
    /**
     * @generated from protobuf field: uint32 total_failed_queries = 6;
     */
    totalFailedQueries: number;
    /**
     * @generated from protobuf field: uint32 total_succ_queries = 8;
     */
    totalSuccQueries: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.OperationalData performance_stats = 9;
     */
    performanceStats?: OperationalData;
}
/**
 * @generated from protobuf message com.yonakaps.package.InitializeConnectionReq
 */
export interface InitializeConnectionReq {
    /**
     * @generated from protobuf field: com.yonakaps.package.ServiceType service_type = 1;
     */
    serviceType: ServiceType;
    /**
     * @generated from protobuf field: int64 dbgate_client_time = 2;
     */
    dbgateClientTime: bigint;
}
/**
 * @generated from protobuf message com.yonakaps.package.InitializeConnectionRsp
 */
export interface InitializeConnectionRsp {
    /**
     * @generated from protobuf field: int64 dbgate_server_time = 2;
     */
    dbgateServerTime: bigint;
}
/**
 * @generated from protobuf message com.yonakaps.package.ServicePingAckReq
 */
export interface ServicePingAckReq {
    /**
     * @generated from protobuf field: com.yonakaps.package.PingTransaction transaction = 1;
     */
    transaction?: PingTransaction;
    /**
     * @generated from protobuf field: com.yonakaps.package.PingTransactionType transaction_type = 2;
     */
    transactionType: PingTransactionType;
}
/**
 * @generated from protobuf message com.yonakaps.package.ServicePingAckRsp
 */
export interface ServicePingAckRsp {
    /**
     * @generated from protobuf field: uint32 acknowledge_ms = 1;
     */
    acknowledgeMs: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.PingTransactionType transaction_type = 2;
     */
    transactionType: PingTransactionType;
}
/**
 * @generated from protobuf message com.yonakaps.package.ServiceHeartBeatNotify
 */
export interface ServiceHeartBeatNotify {
    /**
     * @generated from protobuf field: com.yonakaps.package.PingTransaction transaction = 1;
     */
    transaction?: PingTransaction;
    /**
     * @generated from protobuf field: com.yonakaps.package.PingTransactionType transaction_type = 2;
     */
    transactionType: PingTransactionType;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetSessionDataReq
 */
export interface GetSessionDataReq {
    /**
     * @generated from protobuf field: string session_key = 1;
     */
    sessionKey: string;
    /**
     * @generated from protobuf field: string from_uid = 2;
     */
    fromUid: string;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetSessionDataRsp
 */
export interface GetSessionDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.Session session = 2;
     */
    session?: Session;
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdateSessionDataReq
 */
export interface UpdateSessionDataReq {
    /**
     * @generated from protobuf field: string session_key = 1;
     */
    sessionKey: string;
    /**
     * @generated from protobuf field: string from_uid = 2;
     */
    fromUid: string;
    /**
     * @generated from protobuf field: com.yonakaps.package.Session session_data = 4;
     */
    sessionData?: Session;
    /**
     * @generated from protobuf field: bool delete_session = 3;
     */
    deleteSession: boolean;
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdateSessionDataRsp
 */
export interface UpdateSessionDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetAccountDataReq
 */
export interface GetAccountDataReq {
    /**
     * @generated from protobuf field: string from_uid = 1;
     */
    fromUid: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetAccountDataRsp
 */
export interface GetAccountDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.Account account = 2;
     */
    account?: Account;
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdateAccountDataReq
 */
export interface UpdateAccountDataReq {
    /**
     * @generated from protobuf field: string uid = 2;
     */
    uid: string;
    /**
     * @generated from protobuf field: com.yonakaps.package.Account account_data = 4;
     */
    accountData?: Account;
    /**
     * @generated from protobuf field: bool delete_account = 3;
     */
    deleteAccount: boolean;
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdateAccountDataRsp
 */
export interface UpdateAccountDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetPlayerDataReq
 */
export interface GetPlayerDataReq {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetPlayerDataRsp
 */
export interface GetPlayerDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.Player player = 2;
     */
    player?: Player;
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdatePlayerDataReq
 */
export interface UpdatePlayerDataReq {
    /**
     * @generated from protobuf field: string uid = 2;
     */
    uid: string;
    /**
     * @generated from protobuf field: com.yonakaps.package.Player player_data = 4;
     */
    playerData?: Player;
    /**
     * @generated from protobuf field: bool delete_player = 3;
     */
    deletePlayer: boolean;
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdatePlayerDataRsp
 */
export interface UpdatePlayerDataRsp {
    /**
     * @generated from protobuf field: int32 retcode = 1;
     */
    retcode: number;
}
/**
 * @generated from protobuf message com.yonakaps.package.GetPlayerMailCollectionReq
 */
export interface GetPlayerMailCollectionReq {
}
/**
 * @generated from protobuf message com.yonakaps.package.GetPlayerMailCollectionRsp
 */
export interface GetPlayerMailCollectionRsp {
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdatePlayerMailCollectionReq
 */
export interface UpdatePlayerMailCollectionReq {
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdatePlayerMailCollectionRsp
 */
export interface UpdatePlayerMailCollectionRsp {
}
/**
 * @generated from protobuf message com.yonakaps.package.GetPlayerAvatarCollectionReq
 */
export interface GetPlayerAvatarCollectionReq {
}
/**
 * @generated from protobuf message com.yonakaps.package.GetPlayerAvatarCollectionRsp
 */
export interface GetPlayerAvatarCollectionRsp {
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdateAvatarDataCollectionReq
 */
export interface UpdateAvatarDataCollectionReq {
}
/**
 * @generated from protobuf message com.yonakaps.package.UpdateAvatarDataCollectionRsp
 */
export interface UpdateAvatarDataCollectionRsp {
}
/**
 * @generated from protobuf message com.yonakaps.package.CommandExceptionNotify
 */
export interface CommandExceptionNotify {
    /**
     * @generated from protobuf field: string command = 1;
     */
    command: string;
    /**
     * @generated from protobuf field: bool is_command_invalid = 2;
     */
    isCommandInvalid: boolean;
    /**
     * @generated from protobuf field: bool is_data_malformed = 4;
     */
    isDataMalformed: boolean;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
// types and enums

/**
 * @generated from protobuf message com.yonakaps.package.Player
 */
export interface Player {
    /**
     * @generated from protobuf field: uint32 open_id = 1;
     */
    openId: number;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: string signature = 3;
     */
    signature: string;
    /**
     * @generated from protobuf field: com.yonakaps.package.PlayerProfilePicture profilePicture = 4;
     */
    profilePicture?: PlayerProfilePicture;
    /**
     * @generated from protobuf field: map<string, uint32> props = 5;
     */
    props: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: uint64 registrationDate = 7;
     */
    registrationDate: bigint;
    /**
     * @generated from protobuf field: uint32 nameCardId = 8;
     */
    nameCardId: number;
    /**
     * @generated from protobuf field: uint32 travelerId = 9;
     */
    travelerId: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.PlayerBirthday birthday = 10;
     */
    birthday?: PlayerBirthday;
}
/**
 * @generated from protobuf message com.yonakaps.package.Account
 */
export interface Account {
    /**
     * @generated from protobuf field: string uid = 1;
     */
    uid: string;
    /**
     * @generated from protobuf field: string email = 5;
     */
    email: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string unique_token = 3;
     */
    uniqueToken: string;
    /**
     * @generated from protobuf field: string permission = 4;
     */
    permission: string;
}
/**
 * @generated from protobuf message com.yonakaps.package.Session
 */
export interface Session {
    /**
     * @generated from protobuf field: string endpoint = 1;
     */
    endpoint: string;
    /**
     * @generated from protobuf field: string device_id = 2;
     */
    deviceId: string;
    /**
     * @generated from protobuf field: uint64 time_to_live = 3;
     */
    timeToLive: bigint;
    /**
     * @generated from protobuf field: string session_key = 4;
     */
    sessionKey: string;
    /**
     * @generated from protobuf field: string for_uid = 5;
     */
    forUid: string;
}
/**
 * @generated from protobuf message com.yonakaps.package.PlayerProfilePicture
 */
export interface PlayerProfilePicture {
    /**
     * @generated from protobuf field: uint32 avatar_id = 1;
     */
    avatarId: number;
    /**
     * @generated from protobuf field: uint32 costume_id = 2;
     */
    costumeId: number;
}
/**
 * @generated from protobuf message com.yonakaps.package.PlayerBirthday
 */
export interface PlayerBirthday {
    /**
     * @generated from protobuf field: uint32 month = 1;
     */
    month: number;
    /**
     * @generated from protobuf field: uint32 day = 2;
     */
    day: number;
}
/**
 * @generated from protobuf message com.yonakaps.package.PingTransaction
 */
export interface PingTransaction {
    /**
     * @generated from protobuf field: int64 creation_time = 1;
     */
    creationTime: bigint;
    /**
     * @generated from protobuf field: int64 acknowledge_time = 2;
     */
    acknowledgeTime: bigint;
    /**
     * @generated from protobuf field: bool is_transaction_acked = 4;
     */
    isTransactionAcked: boolean;
}
/**
 * @generated from protobuf message com.yonakaps.package.ServiceBasicInfo
 */
export interface ServiceBasicInfo {
    /**
     * @generated from protobuf field: bool is_alive = 2;
     */
    isAlive: boolean;
    /**
     * @generated from protobuf field: uint32 service_latency = 1;
     */
    serviceLatency: number;
    /**
     * @generated from protobuf field: com.yonakaps.package.ServiceType service_type = 3;
     */
    serviceType: ServiceType;
    /**
     * @generated from protobuf field: uint64 last_ping_transaction = 4;
     */
    lastPingTransaction: bigint;
}
/**
 * @generated from protobuf message com.yonakaps.package.OperationalData
 */
export interface OperationalData {
    /**
     * @generated from protobuf field: uint64 memory_usage = 1;
     */
    memoryUsage: bigint;
    /**
     * @generated from protobuf field: string process_environment = 5;
     */
    processEnvironment: string;
    /**
     * @generated from protobuf field: uint32 memory_usage_percentage = 2;
     */
    memoryUsagePercentage: number;
    /**
     * @generated from protobuf field: uint64 overall_memory = 3;
     */
    overallMemory: bigint;
    /**
     * @generated from protobuf field: uint64 dbgate_uptime = 6;
     */
    dbgateUptime: bigint;
    /**
     * @generated from protobuf field: uint32 process_id = 4;
     */
    processId: number;
}
/**
 * @generated from protobuf enum com.yonakaps.package.PingTransactionType
 */
export enum PingTransactionType {
    /**
     * @generated from protobuf enum value: FIRST_TRANSACTION = 0;
     */
    FIRST_TRANSACTION = 0,
    /**
     * @generated from protobuf enum value: TRANSACTION_SUCC = 2;
     */
    TRANSACTION_SUCC = 2,
    /**
     * @generated from protobuf enum value: IS_ALIVE = 1;
     */
    IS_ALIVE = 1
}
/**
 * @generated from protobuf enum com.yonakaps.package.ServiceType
 */
export enum ServiceType {
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_CLIENT = 1;
     */
    CLIENT = 1,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_GATE = 2;
     */
    GATE = 2,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_GAME = 3;
     */
    GAME = 3,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_NODE = 4;
     */
    NODE = 4,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_DB = 5;
     */
    DB = 5,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_SNS = 6;
     */
    SNS = 6,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_DISPATCH = 7;
     */
    DISPATCH = 7,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_MUIP = 8;
     */
    MUIP = 8,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_OFFLINE_MSG = 9;
     */
    OFFLINE_MSG = 9,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_MAIL = 10;
     */
    MAIL = 10,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_MP = 11;
     */
    MP = 11,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_HTTPPROXY = 12;
     */
    HTTPPROXY = 12,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_ACTIVITY = 13;
     */
    ACTIVITY = 13,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_PATHFINDING = 14;
     */
    PATHFINDING = 14,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_SOCIAL = 15;
     */
    SOCIAL = 15,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_OA = 16;
     */
    OA = 16,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_MATCH = 17;
     */
    MATCH = 17,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_OFFLINE_OP = 18;
     */
    OFFLINE_OP = 18,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_TOTHEMOON = 19;
     */
    TOTHEMOON = 19,
    /**
     * @generated from protobuf enum value: SERVICE_TYPE_GCG = 20;
     */
    GCG = 20
}
/**
 * @generated from protobuf enum com.yonakaps.package.DbGateOpcodes
 */
export enum DbGateOpcodes {
    /**
     * @generated from protobuf enum value: OP_SUCC = 0;
     */
    OP_SUCC = 0,
    /**
     * @generated from protobuf enum value: OP_FAIL = -1;
     */
    OP_FAIL = -1,
    /**
     * @generated from protobuf enum value: OP_SVR_ERROR = 1;
     */
    OP_SVR_ERROR = 1,
    /**
     * @generated from protobuf enum value: OP_UNKNOWN_ERROR = 2;
     */
    OP_UNKNOWN_ERROR = 2,
    /**
     * @generated from protobuf enum value: OP_FREQUENT = 3;
     */
    OP_FREQUENT = 3,
    /**
     * @generated from protobuf enum value: OP_NODE_FORWARD_ERROR = 4;
     */
    OP_NODE_FORWARD_ERROR = 4,
    /**
     * @generated from protobuf enum value: OP_NOT_FOUND_CONFIG = 5;
     */
    OP_NOT_FOUND_CONFIG = 5,
    /**
     * @generated from protobuf enum value: OP_SYSTEM_BUSY = 6;
     */
    OP_SYSTEM_BUSY = 6,
    /**
     * @generated from protobuf enum value: OP_GM_UID_BIND = 7;
     */
    OP_GM_UID_BIND = 7,
    /**
     * @generated from protobuf enum value: OP_FORBIDDEN = 8;
     */
    OP_FORBIDDEN = 8,
    /**
     * @generated from protobuf enum value: OP_STOP_REGISTER = 10;
     */
    OP_STOP_REGISTER = 10,
    /**
     * @generated from protobuf enum value: OP_STOP_SERVER = 11;
     */
    OP_STOP_SERVER = 11,
    /**
     * @generated from protobuf enum value: OP_ACCOUNT_VEIRFY_ERROR = 12;
     */
    OP_ACCOUNT_VEIRFY_ERROR = 12,
    /**
     * @generated from protobuf enum value: OP_ACCOUNT_FREEZE = 13;
     */
    OP_ACCOUNT_FREEZE = 13,
    /**
     * @generated from protobuf enum value: OP_REPEAT_LOGIN = 14;
     */
    OP_REPEAT_LOGIN = 14,
    /**
     * @generated from protobuf enum value: OP_CLIENT_VERSION_ERROR = 15;
     */
    OP_CLIENT_VERSION_ERROR = 15,
    /**
     * @generated from protobuf enum value: OP_TOKEN_ERROR = 16;
     */
    OP_TOKEN_ERROR = 16,
    /**
     * @generated from protobuf enum value: OP_ACCOUNT_NOT_EXIST = 17;
     */
    OP_ACCOUNT_NOT_EXIST = 17,
    /**
     * @generated from protobuf enum value: OP_WAIT_OTHER_LOGIN = 18;
     */
    OP_WAIT_OTHER_LOGIN = 18,
    /**
     * @generated from protobuf enum value: OP_ANOTHER_LOGIN = 19;
     */
    OP_ANOTHER_LOGIN = 19,
    /**
     * @generated from protobuf enum value: OP_CLIENT_FORCE_UPDATE = 20;
     */
    OP_CLIENT_FORCE_UPDATE = 20,
    /**
     * @generated from protobuf enum value: OP_BLACK_UID = 21;
     */
    OP_BLACK_UID = 21,
    /**
     * @generated from protobuf enum value: OP_LOGIN_DB_FAIL = 22;
     */
    OP_LOGIN_DB_FAIL = 22,
    /**
     * @generated from protobuf enum value: OP_LOGIN_INIT_FAIL = 23;
     */
    OP_LOGIN_INIT_FAIL = 23,
    /**
     * @generated from protobuf enum value: OP_MYSQL_DUPLICATE = 24;
     */
    OP_MYSQL_DUPLICATE = 24,
    /**
     * @generated from protobuf enum value: OP_MAX_PLAYER = 25;
     */
    OP_MAX_PLAYER = 25,
    /**
     * @generated from protobuf enum value: OP_ANTI_ADDICT = 26;
     */
    OP_ANTI_ADDICT = 26,
    /**
     * @generated from protobuf enum value: OP_PS_PLAYER_WITHOUT_ONLINE_ID = 27;
     */
    OP_PS_PLAYER_WITHOUT_ONLINE_ID = 27,
    /**
     * @generated from protobuf enum value: OP_ONLINE_ID_NOT_FOUND = 28;
     */
    OP_ONLINE_ID_NOT_FOUND = 28,
    /**
     * @generated from protobuf enum value: OP_ONLNE_ID_NOT_MATCH = 29;
     */
    OP_ONLNE_ID_NOT_MATCH = 29,
    /**
     * @generated from protobuf enum value: OP_REGISTER_IS_FULL = 30;
     */
    OP_REGISTER_IS_FULL = 30,
    /**
     * @generated from protobuf enum value: OP_CHECKSUM_INVALID = 31;
     */
    OP_CHECKSUM_INVALID = 31,
    /**
     * @generated from protobuf enum value: OP_BLACK_REGISTER_IP = 32;
     */
    OP_BLACK_REGISTER_IP = 32,
    /**
     * @generated from protobuf enum value: OP_EXCEED_REGISTER_RATE = 33;
     */
    OP_EXCEED_REGISTER_RATE = 33,
    /**
     * @generated from protobuf enum value: OP_UNKNOWN_PLATFORM = 34;
     */
    OP_UNKNOWN_PLATFORM = 34,
    /**
     * @generated from protobuf enum value: OP_TOKEN_PARAM_ERROR = 35;
     */
    OP_TOKEN_PARAM_ERROR = 35,
    /**
     * @generated from protobuf enum value: OP_ANTI_OFFLINE_ERROR = 36;
     */
    OP_ANTI_OFFLINE_ERROR = 36,
    /**
     * @generated from protobuf enum value: OP_BLACK_LOGIN_IP = 37;
     */
    OP_BLACK_LOGIN_IP = 37,
    /**
     * @generated from protobuf enum value: OP_GET_TOKEN_SESSION_HAS_UID = 38;
     */
    OP_GET_TOKEN_SESSION_HAS_UID = 38,
    /**
     * @generated from protobuf enum value: OP_ENVIRONMENT_ERROR = 39;
     */
    OP_ENVIRONMENT_ERROR = 39,
    /**
     * @generated from protobuf enum value: OP_CHECK_CLIENT_VERSION_HASH_FAIL = 40;
     */
    OP_CHECK_CLIENT_VERSION_HASH_FAIL = 40,
    /**
     * @generated from protobuf enum value: OP_MINOR_REGISTER_FOBIDDEN = 41;
     */
    OP_MINOR_REGISTER_FOBIDDEN = 41,
    /**
     * @generated from protobuf enum value: OP_SECURITY_LIBRARY_ERROR = 42;
     */
    OP_SECURITY_LIBRARY_ERROR = 42
}
// @generated message type with reflection information, may provide speed optimized methods
class GetDbGateOperationalDataReq$Type extends MessageType<GetDbGateOperationalDataReq> {
    constructor() {
        super("com.yonakaps.package.GetDbGateOperationalDataReq", [
            { no: 1, name: "list_service_infos", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetDbGateOperationalDataReq>): GetDbGateOperationalDataReq {
        const message = { listServiceInfos: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDbGateOperationalDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDbGateOperationalDataReq): GetDbGateOperationalDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool list_service_infos */ 1:
                    message.listServiceInfos = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDbGateOperationalDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool list_service_infos = 1; */
        if (message.listServiceInfos !== false)
            writer.tag(1, WireType.Varint).bool(message.listServiceInfos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetDbGateOperationalDataReq
 */
export const GetDbGateOperationalDataReq = new GetDbGateOperationalDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDbGateOperationalDataRsp$Type extends MessageType<GetDbGateOperationalDataRsp> {
    constructor() {
        super("com.yonakaps.package.GetDbGateOperationalDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "db_connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "connected_service_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "service_infos", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServiceBasicInfo },
            { no: 5, name: "total_queries_performed", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "total_failed_queries", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "total_succ_queries", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "performance_stats", kind: "message", T: () => OperationalData }
        ]);
    }
    create(value?: PartialMessage<GetDbGateOperationalDataRsp>): GetDbGateOperationalDataRsp {
        const message = { retcode: 0, dbConnected: false, connectedServiceCount: 0, serviceInfos: [], totalQueriesPerformed: 0, totalFailedQueries: 0, totalSuccQueries: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDbGateOperationalDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDbGateOperationalDataRsp): GetDbGateOperationalDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* bool db_connected */ 2:
                    message.dbConnected = reader.bool();
                    break;
                case /* uint32 connected_service_count */ 3:
                    message.connectedServiceCount = reader.uint32();
                    break;
                case /* repeated com.yonakaps.package.ServiceBasicInfo service_infos */ 4:
                    message.serviceInfos.push(ServiceBasicInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 total_queries_performed */ 5:
                    message.totalQueriesPerformed = reader.uint32();
                    break;
                case /* uint32 total_failed_queries */ 6:
                    message.totalFailedQueries = reader.uint32();
                    break;
                case /* uint32 total_succ_queries */ 8:
                    message.totalSuccQueries = reader.uint32();
                    break;
                case /* com.yonakaps.package.OperationalData performance_stats */ 9:
                    message.performanceStats = OperationalData.internalBinaryRead(reader, reader.uint32(), options, message.performanceStats);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDbGateOperationalDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* bool db_connected = 2; */
        if (message.dbConnected !== false)
            writer.tag(2, WireType.Varint).bool(message.dbConnected);
        /* uint32 connected_service_count = 3; */
        if (message.connectedServiceCount !== 0)
            writer.tag(3, WireType.Varint).uint32(message.connectedServiceCount);
        /* repeated com.yonakaps.package.ServiceBasicInfo service_infos = 4; */
        for (let i = 0; i < message.serviceInfos.length; i++)
            ServiceBasicInfo.internalBinaryWrite(message.serviceInfos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint32 total_queries_performed = 5; */
        if (message.totalQueriesPerformed !== 0)
            writer.tag(5, WireType.Varint).uint32(message.totalQueriesPerformed);
        /* uint32 total_failed_queries = 6; */
        if (message.totalFailedQueries !== 0)
            writer.tag(6, WireType.Varint).uint32(message.totalFailedQueries);
        /* uint32 total_succ_queries = 8; */
        if (message.totalSuccQueries !== 0)
            writer.tag(8, WireType.Varint).uint32(message.totalSuccQueries);
        /* com.yonakaps.package.OperationalData performance_stats = 9; */
        if (message.performanceStats)
            OperationalData.internalBinaryWrite(message.performanceStats, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetDbGateOperationalDataRsp
 */
export const GetDbGateOperationalDataRsp = new GetDbGateOperationalDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitializeConnectionReq$Type extends MessageType<InitializeConnectionReq> {
    constructor() {
        super("com.yonakaps.package.InitializeConnectionReq", [
            { no: 1, name: "service_type", kind: "enum", T: () => ["com.yonakaps.package.ServiceType", ServiceType, "SERVICE_TYPE_"] },
            { no: 2, name: "dbgate_client_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InitializeConnectionReq>): InitializeConnectionReq {
        const message = { serviceType: 0, dbgateClientTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitializeConnectionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitializeConnectionReq): InitializeConnectionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.yonakaps.package.ServiceType service_type */ 1:
                    message.serviceType = reader.int32();
                    break;
                case /* int64 dbgate_client_time */ 2:
                    message.dbgateClientTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitializeConnectionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.yonakaps.package.ServiceType service_type = 1; */
        if (message.serviceType !== 0)
            writer.tag(1, WireType.Varint).int32(message.serviceType);
        /* int64 dbgate_client_time = 2; */
        if (message.dbgateClientTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.dbgateClientTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.InitializeConnectionReq
 */
export const InitializeConnectionReq = new InitializeConnectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InitializeConnectionRsp$Type extends MessageType<InitializeConnectionRsp> {
    constructor() {
        super("com.yonakaps.package.InitializeConnectionRsp", [
            { no: 2, name: "dbgate_server_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<InitializeConnectionRsp>): InitializeConnectionRsp {
        const message = { dbgateServerTime: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitializeConnectionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitializeConnectionRsp): InitializeConnectionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 dbgate_server_time */ 2:
                    message.dbgateServerTime = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitializeConnectionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 dbgate_server_time = 2; */
        if (message.dbgateServerTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.dbgateServerTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.InitializeConnectionRsp
 */
export const InitializeConnectionRsp = new InitializeConnectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServicePingAckReq$Type extends MessageType<ServicePingAckReq> {
    constructor() {
        super("com.yonakaps.package.ServicePingAckReq", [
            { no: 1, name: "transaction", kind: "message", T: () => PingTransaction },
            { no: 2, name: "transaction_type", kind: "enum", T: () => ["com.yonakaps.package.PingTransactionType", PingTransactionType] }
        ]);
    }
    create(value?: PartialMessage<ServicePingAckReq>): ServicePingAckReq {
        const message = { transactionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServicePingAckReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServicePingAckReq): ServicePingAckReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.yonakaps.package.PingTransaction transaction */ 1:
                    message.transaction = PingTransaction.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* com.yonakaps.package.PingTransactionType transaction_type */ 2:
                    message.transactionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServicePingAckReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.yonakaps.package.PingTransaction transaction = 1; */
        if (message.transaction)
            PingTransaction.internalBinaryWrite(message.transaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.yonakaps.package.PingTransactionType transaction_type = 2; */
        if (message.transactionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.transactionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.ServicePingAckReq
 */
export const ServicePingAckReq = new ServicePingAckReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServicePingAckRsp$Type extends MessageType<ServicePingAckRsp> {
    constructor() {
        super("com.yonakaps.package.ServicePingAckRsp", [
            { no: 1, name: "acknowledge_ms", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "transaction_type", kind: "enum", T: () => ["com.yonakaps.package.PingTransactionType", PingTransactionType] }
        ]);
    }
    create(value?: PartialMessage<ServicePingAckRsp>): ServicePingAckRsp {
        const message = { acknowledgeMs: 0, transactionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServicePingAckRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServicePingAckRsp): ServicePingAckRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 acknowledge_ms */ 1:
                    message.acknowledgeMs = reader.uint32();
                    break;
                case /* com.yonakaps.package.PingTransactionType transaction_type */ 2:
                    message.transactionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServicePingAckRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 acknowledge_ms = 1; */
        if (message.acknowledgeMs !== 0)
            writer.tag(1, WireType.Varint).uint32(message.acknowledgeMs);
        /* com.yonakaps.package.PingTransactionType transaction_type = 2; */
        if (message.transactionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.transactionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.ServicePingAckRsp
 */
export const ServicePingAckRsp = new ServicePingAckRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceHeartBeatNotify$Type extends MessageType<ServiceHeartBeatNotify> {
    constructor() {
        super("com.yonakaps.package.ServiceHeartBeatNotify", [
            { no: 1, name: "transaction", kind: "message", T: () => PingTransaction },
            { no: 2, name: "transaction_type", kind: "enum", T: () => ["com.yonakaps.package.PingTransactionType", PingTransactionType] }
        ]);
    }
    create(value?: PartialMessage<ServiceHeartBeatNotify>): ServiceHeartBeatNotify {
        const message = { transactionType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServiceHeartBeatNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceHeartBeatNotify): ServiceHeartBeatNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* com.yonakaps.package.PingTransaction transaction */ 1:
                    message.transaction = PingTransaction.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* com.yonakaps.package.PingTransactionType transaction_type */ 2:
                    message.transactionType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceHeartBeatNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* com.yonakaps.package.PingTransaction transaction = 1; */
        if (message.transaction)
            PingTransaction.internalBinaryWrite(message.transaction, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* com.yonakaps.package.PingTransactionType transaction_type = 2; */
        if (message.transactionType !== 0)
            writer.tag(2, WireType.Varint).int32(message.transactionType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.ServiceHeartBeatNotify
 */
export const ServiceHeartBeatNotify = new ServiceHeartBeatNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionDataReq$Type extends MessageType<GetSessionDataReq> {
    constructor() {
        super("com.yonakaps.package.GetSessionDataReq", [
            { no: 1, name: "session_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSessionDataReq>): GetSessionDataReq {
        const message = { sessionKey: "", fromUid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSessionDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionDataReq): GetSessionDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_key */ 1:
                    message.sessionKey = reader.string();
                    break;
                case /* string from_uid */ 2:
                    message.fromUid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_key = 1; */
        if (message.sessionKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionKey);
        /* string from_uid = 2; */
        if (message.fromUid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetSessionDataReq
 */
export const GetSessionDataReq = new GetSessionDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionDataRsp$Type extends MessageType<GetSessionDataRsp> {
    constructor() {
        super("com.yonakaps.package.GetSessionDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "session", kind: "message", T: () => Session }
        ]);
    }
    create(value?: PartialMessage<GetSessionDataRsp>): GetSessionDataRsp {
        const message = { retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetSessionDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSessionDataRsp): GetSessionDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* com.yonakaps.package.Session session */ 2:
                    message.session = Session.internalBinaryRead(reader, reader.uint32(), options, message.session);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSessionDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* com.yonakaps.package.Session session = 2; */
        if (message.session)
            Session.internalBinaryWrite(message.session, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetSessionDataRsp
 */
export const GetSessionDataRsp = new GetSessionDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSessionDataReq$Type extends MessageType<UpdateSessionDataReq> {
    constructor() {
        super("com.yonakaps.package.UpdateSessionDataReq", [
            { no: 1, name: "session_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "session_data", kind: "message", T: () => Session },
            { no: 3, name: "delete_session", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateSessionDataReq>): UpdateSessionDataReq {
        const message = { sessionKey: "", fromUid: "", deleteSession: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSessionDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSessionDataReq): UpdateSessionDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_key */ 1:
                    message.sessionKey = reader.string();
                    break;
                case /* string from_uid */ 2:
                    message.fromUid = reader.string();
                    break;
                case /* com.yonakaps.package.Session session_data */ 4:
                    message.sessionData = Session.internalBinaryRead(reader, reader.uint32(), options, message.sessionData);
                    break;
                case /* bool delete_session */ 3:
                    message.deleteSession = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSessionDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_key = 1; */
        if (message.sessionKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionKey);
        /* string from_uid = 2; */
        if (message.fromUid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fromUid);
        /* com.yonakaps.package.Session session_data = 4; */
        if (message.sessionData)
            Session.internalBinaryWrite(message.sessionData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool delete_session = 3; */
        if (message.deleteSession !== false)
            writer.tag(3, WireType.Varint).bool(message.deleteSession);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdateSessionDataReq
 */
export const UpdateSessionDataReq = new UpdateSessionDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSessionDataRsp$Type extends MessageType<UpdateSessionDataRsp> {
    constructor() {
        super("com.yonakaps.package.UpdateSessionDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateSessionDataRsp>): UpdateSessionDataRsp {
        const message = { retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateSessionDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSessionDataRsp): UpdateSessionDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSessionDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdateSessionDataRsp
 */
export const UpdateSessionDataRsp = new UpdateSessionDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountDataReq$Type extends MessageType<GetAccountDataReq> {
    constructor() {
        super("com.yonakaps.package.GetAccountDataReq", [
            { no: 1, name: "from_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAccountDataReq>): GetAccountDataReq {
        const message = { fromUid: "", username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAccountDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountDataReq): GetAccountDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_uid */ 1:
                    message.fromUid = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_uid = 1; */
        if (message.fromUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromUid);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetAccountDataReq
 */
export const GetAccountDataReq = new GetAccountDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAccountDataRsp$Type extends MessageType<GetAccountDataRsp> {
    constructor() {
        super("com.yonakaps.package.GetAccountDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "account", kind: "message", T: () => Account }
        ]);
    }
    create(value?: PartialMessage<GetAccountDataRsp>): GetAccountDataRsp {
        const message = { retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAccountDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAccountDataRsp): GetAccountDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* com.yonakaps.package.Account account */ 2:
                    message.account = Account.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAccountDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* com.yonakaps.package.Account account = 2; */
        if (message.account)
            Account.internalBinaryWrite(message.account, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetAccountDataRsp
 */
export const GetAccountDataRsp = new GetAccountDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAccountDataReq$Type extends MessageType<UpdateAccountDataReq> {
    constructor() {
        super("com.yonakaps.package.UpdateAccountDataReq", [
            { no: 2, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "account_data", kind: "message", T: () => Account },
            { no: 3, name: "delete_account", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAccountDataReq>): UpdateAccountDataReq {
        const message = { uid: "", deleteAccount: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAccountDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAccountDataReq): UpdateAccountDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 2:
                    message.uid = reader.string();
                    break;
                case /* com.yonakaps.package.Account account_data */ 4:
                    message.accountData = Account.internalBinaryRead(reader, reader.uint32(), options, message.accountData);
                    break;
                case /* bool delete_account */ 3:
                    message.deleteAccount = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAccountDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 2; */
        if (message.uid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uid);
        /* com.yonakaps.package.Account account_data = 4; */
        if (message.accountData)
            Account.internalBinaryWrite(message.accountData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool delete_account = 3; */
        if (message.deleteAccount !== false)
            writer.tag(3, WireType.Varint).bool(message.deleteAccount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdateAccountDataReq
 */
export const UpdateAccountDataReq = new UpdateAccountDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAccountDataRsp$Type extends MessageType<UpdateAccountDataRsp> {
    constructor() {
        super("com.yonakaps.package.UpdateAccountDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAccountDataRsp>): UpdateAccountDataRsp {
        const message = { retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAccountDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAccountDataRsp): UpdateAccountDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAccountDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdateAccountDataRsp
 */
export const UpdateAccountDataRsp = new UpdateAccountDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerDataReq$Type extends MessageType<GetPlayerDataReq> {
    constructor() {
        super("com.yonakaps.package.GetPlayerDataReq", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPlayerDataReq>): GetPlayerDataReq {
        const message = { uid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerDataReq): GetPlayerDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetPlayerDataReq
 */
export const GetPlayerDataReq = new GetPlayerDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerDataRsp$Type extends MessageType<GetPlayerDataRsp> {
    constructor() {
        super("com.yonakaps.package.GetPlayerDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "player", kind: "message", T: () => Player }
        ]);
    }
    create(value?: PartialMessage<GetPlayerDataRsp>): GetPlayerDataRsp {
        const message = { retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerDataRsp): GetPlayerDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* com.yonakaps.package.Player player */ 2:
                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* com.yonakaps.package.Player player = 2; */
        if (message.player)
            Player.internalBinaryWrite(message.player, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetPlayerDataRsp
 */
export const GetPlayerDataRsp = new GetPlayerDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePlayerDataReq$Type extends MessageType<UpdatePlayerDataReq> {
    constructor() {
        super("com.yonakaps.package.UpdatePlayerDataReq", [
            { no: 2, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "player_data", kind: "message", T: () => Player },
            { no: 3, name: "delete_player", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePlayerDataReq>): UpdatePlayerDataReq {
        const message = { uid: "", deletePlayer: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePlayerDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePlayerDataReq): UpdatePlayerDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 2:
                    message.uid = reader.string();
                    break;
                case /* com.yonakaps.package.Player player_data */ 4:
                    message.playerData = Player.internalBinaryRead(reader, reader.uint32(), options, message.playerData);
                    break;
                case /* bool delete_player */ 3:
                    message.deletePlayer = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePlayerDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 2; */
        if (message.uid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uid);
        /* com.yonakaps.package.Player player_data = 4; */
        if (message.playerData)
            Player.internalBinaryWrite(message.playerData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool delete_player = 3; */
        if (message.deletePlayer !== false)
            writer.tag(3, WireType.Varint).bool(message.deletePlayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdatePlayerDataReq
 */
export const UpdatePlayerDataReq = new UpdatePlayerDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePlayerDataRsp$Type extends MessageType<UpdatePlayerDataRsp> {
    constructor() {
        super("com.yonakaps.package.UpdatePlayerDataRsp", [
            { no: 1, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePlayerDataRsp>): UpdatePlayerDataRsp {
        const message = { retcode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePlayerDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePlayerDataRsp): UpdatePlayerDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePlayerDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 1; */
        if (message.retcode !== 0)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdatePlayerDataRsp
 */
export const UpdatePlayerDataRsp = new UpdatePlayerDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerMailCollectionReq$Type extends MessageType<GetPlayerMailCollectionReq> {
    constructor() {
        super("com.yonakaps.package.GetPlayerMailCollectionReq", []);
    }
    create(value?: PartialMessage<GetPlayerMailCollectionReq>): GetPlayerMailCollectionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerMailCollectionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerMailCollectionReq): GetPlayerMailCollectionReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPlayerMailCollectionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetPlayerMailCollectionReq
 */
export const GetPlayerMailCollectionReq = new GetPlayerMailCollectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerMailCollectionRsp$Type extends MessageType<GetPlayerMailCollectionRsp> {
    constructor() {
        super("com.yonakaps.package.GetPlayerMailCollectionRsp", []);
    }
    create(value?: PartialMessage<GetPlayerMailCollectionRsp>): GetPlayerMailCollectionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerMailCollectionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerMailCollectionRsp): GetPlayerMailCollectionRsp {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPlayerMailCollectionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetPlayerMailCollectionRsp
 */
export const GetPlayerMailCollectionRsp = new GetPlayerMailCollectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePlayerMailCollectionReq$Type extends MessageType<UpdatePlayerMailCollectionReq> {
    constructor() {
        super("com.yonakaps.package.UpdatePlayerMailCollectionReq", []);
    }
    create(value?: PartialMessage<UpdatePlayerMailCollectionReq>): UpdatePlayerMailCollectionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePlayerMailCollectionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePlayerMailCollectionReq): UpdatePlayerMailCollectionReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdatePlayerMailCollectionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdatePlayerMailCollectionReq
 */
export const UpdatePlayerMailCollectionReq = new UpdatePlayerMailCollectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePlayerMailCollectionRsp$Type extends MessageType<UpdatePlayerMailCollectionRsp> {
    constructor() {
        super("com.yonakaps.package.UpdatePlayerMailCollectionRsp", []);
    }
    create(value?: PartialMessage<UpdatePlayerMailCollectionRsp>): UpdatePlayerMailCollectionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePlayerMailCollectionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePlayerMailCollectionRsp): UpdatePlayerMailCollectionRsp {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdatePlayerMailCollectionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdatePlayerMailCollectionRsp
 */
export const UpdatePlayerMailCollectionRsp = new UpdatePlayerMailCollectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerAvatarCollectionReq$Type extends MessageType<GetPlayerAvatarCollectionReq> {
    constructor() {
        super("com.yonakaps.package.GetPlayerAvatarCollectionReq", []);
    }
    create(value?: PartialMessage<GetPlayerAvatarCollectionReq>): GetPlayerAvatarCollectionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerAvatarCollectionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerAvatarCollectionReq): GetPlayerAvatarCollectionReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPlayerAvatarCollectionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetPlayerAvatarCollectionReq
 */
export const GetPlayerAvatarCollectionReq = new GetPlayerAvatarCollectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerAvatarCollectionRsp$Type extends MessageType<GetPlayerAvatarCollectionRsp> {
    constructor() {
        super("com.yonakaps.package.GetPlayerAvatarCollectionRsp", []);
    }
    create(value?: PartialMessage<GetPlayerAvatarCollectionRsp>): GetPlayerAvatarCollectionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerAvatarCollectionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerAvatarCollectionRsp): GetPlayerAvatarCollectionRsp {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPlayerAvatarCollectionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.GetPlayerAvatarCollectionRsp
 */
export const GetPlayerAvatarCollectionRsp = new GetPlayerAvatarCollectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAvatarDataCollectionReq$Type extends MessageType<UpdateAvatarDataCollectionReq> {
    constructor() {
        super("com.yonakaps.package.UpdateAvatarDataCollectionReq", []);
    }
    create(value?: PartialMessage<UpdateAvatarDataCollectionReq>): UpdateAvatarDataCollectionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAvatarDataCollectionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAvatarDataCollectionReq): UpdateAvatarDataCollectionReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateAvatarDataCollectionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdateAvatarDataCollectionReq
 */
export const UpdateAvatarDataCollectionReq = new UpdateAvatarDataCollectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAvatarDataCollectionRsp$Type extends MessageType<UpdateAvatarDataCollectionRsp> {
    constructor() {
        super("com.yonakaps.package.UpdateAvatarDataCollectionRsp", []);
    }
    create(value?: PartialMessage<UpdateAvatarDataCollectionRsp>): UpdateAvatarDataCollectionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateAvatarDataCollectionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAvatarDataCollectionRsp): UpdateAvatarDataCollectionRsp {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateAvatarDataCollectionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.UpdateAvatarDataCollectionRsp
 */
export const UpdateAvatarDataCollectionRsp = new UpdateAvatarDataCollectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandExceptionNotify$Type extends MessageType<CommandExceptionNotify> {
    constructor() {
        super("com.yonakaps.package.CommandExceptionNotify", [
            { no: 1, name: "command", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_command_invalid", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_data_malformed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CommandExceptionNotify>): CommandExceptionNotify {
        const message = { command: "", isCommandInvalid: false, isDataMalformed: false, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CommandExceptionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CommandExceptionNotify): CommandExceptionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string command */ 1:
                    message.command = reader.string();
                    break;
                case /* bool is_command_invalid */ 2:
                    message.isCommandInvalid = reader.bool();
                    break;
                case /* bool is_data_malformed */ 4:
                    message.isDataMalformed = reader.bool();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CommandExceptionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string command = 1; */
        if (message.command !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.command);
        /* bool is_command_invalid = 2; */
        if (message.isCommandInvalid !== false)
            writer.tag(2, WireType.Varint).bool(message.isCommandInvalid);
        /* bool is_data_malformed = 4; */
        if (message.isDataMalformed !== false)
            writer.tag(4, WireType.Varint).bool(message.isDataMalformed);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.CommandExceptionNotify
 */
export const CommandExceptionNotify = new CommandExceptionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("com.yonakaps.package.Player", [
            { no: 1, name: "open_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "profilePicture", kind: "message", T: () => PlayerProfilePicture },
            { no: 5, name: "props", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "registrationDate", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "nameCardId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "travelerId", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "birthday", kind: "message", T: () => PlayerBirthday }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = { openId: 0, nickname: "", signature: "", props: {}, registrationDate: 0n, nameCardId: 0, travelerId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 open_id */ 1:
                    message.openId = reader.uint32();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* string signature */ 3:
                    message.signature = reader.string();
                    break;
                case /* com.yonakaps.package.PlayerProfilePicture profilePicture */ 4:
                    message.profilePicture = PlayerProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* map<string, uint32> props */ 5:
                    this.binaryReadMap5(message.props, reader, options);
                    break;
                case /* uint64 registrationDate */ 7:
                    message.registrationDate = reader.uint64().toBigInt();
                    break;
                case /* uint32 nameCardId */ 8:
                    message.nameCardId = reader.uint32();
                    break;
                case /* uint32 travelerId */ 9:
                    message.travelerId = reader.uint32();
                    break;
                case /* com.yonakaps.package.PlayerBirthday birthday */ 10:
                    message.birthday = PlayerBirthday.internalBinaryRead(reader, reader.uint32(), options, message.birthday);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: Player["props"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Player["props"] | undefined, val: Player["props"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.yonakaps.package.Player.props");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 open_id = 1; */
        if (message.openId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.openId);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* string signature = 3; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        /* com.yonakaps.package.PlayerProfilePicture profilePicture = 4; */
        if (message.profilePicture)
            PlayerProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* map<string, uint32> props = 5; */
        for (let k of Object.keys(message.props))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).uint32(message.props[k]).join();
        /* uint64 registrationDate = 7; */
        if (message.registrationDate !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.registrationDate);
        /* uint32 nameCardId = 8; */
        if (message.nameCardId !== 0)
            writer.tag(8, WireType.Varint).uint32(message.nameCardId);
        /* uint32 travelerId = 9; */
        if (message.travelerId !== 0)
            writer.tag(9, WireType.Varint).uint32(message.travelerId);
        /* com.yonakaps.package.PlayerBirthday birthday = 10; */
        if (message.birthday)
            PlayerBirthday.internalBinaryWrite(message.birthday, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Account$Type extends MessageType<Account> {
    constructor() {
        super("com.yonakaps.package.Account", [
            { no: 1, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "unique_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "permission", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Account>): Account {
        const message = { uid: "", email: "", username: "", uniqueToken: "", permission: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Account>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Account): Account {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uid */ 1:
                    message.uid = reader.string();
                    break;
                case /* string email */ 5:
                    message.email = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string unique_token */ 3:
                    message.uniqueToken = reader.string();
                    break;
                case /* string permission */ 4:
                    message.permission = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Account, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uid = 1; */
        if (message.uid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uid);
        /* string email = 5; */
        if (message.email !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.email);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string unique_token = 3; */
        if (message.uniqueToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uniqueToken);
        /* string permission = 4; */
        if (message.permission !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.permission);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.Account
 */
export const Account = new Account$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Session$Type extends MessageType<Session> {
    constructor() {
        super("com.yonakaps.package.Session", [
            { no: 1, name: "endpoint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "time_to_live", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "session_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "for_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Session>): Session {
        const message = { endpoint: "", deviceId: "", timeToLive: 0n, sessionKey: "", forUid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Session>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Session): Session {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string endpoint */ 1:
                    message.endpoint = reader.string();
                    break;
                case /* string device_id */ 2:
                    message.deviceId = reader.string();
                    break;
                case /* uint64 time_to_live */ 3:
                    message.timeToLive = reader.uint64().toBigInt();
                    break;
                case /* string session_key */ 4:
                    message.sessionKey = reader.string();
                    break;
                case /* string for_uid */ 5:
                    message.forUid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Session, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string endpoint = 1; */
        if (message.endpoint !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.endpoint);
        /* string device_id = 2; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* uint64 time_to_live = 3; */
        if (message.timeToLive !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.timeToLive);
        /* string session_key = 4; */
        if (message.sessionKey !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sessionKey);
        /* string for_uid = 5; */
        if (message.forUid !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.forUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.Session
 */
export const Session = new Session$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerProfilePicture$Type extends MessageType<PlayerProfilePicture> {
    constructor() {
        super("com.yonakaps.package.PlayerProfilePicture", [
            { no: 1, name: "avatar_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "costume_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerProfilePicture>): PlayerProfilePicture {
        const message = { avatarId: 0, costumeId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerProfilePicture>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerProfilePicture): PlayerProfilePicture {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 avatar_id */ 1:
                    message.avatarId = reader.uint32();
                    break;
                case /* uint32 costume_id */ 2:
                    message.costumeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerProfilePicture, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 avatar_id = 1; */
        if (message.avatarId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.avatarId);
        /* uint32 costume_id = 2; */
        if (message.costumeId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.costumeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.PlayerProfilePicture
 */
export const PlayerProfilePicture = new PlayerProfilePicture$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerBirthday$Type extends MessageType<PlayerBirthday> {
    constructor() {
        super("com.yonakaps.package.PlayerBirthday", [
            { no: 1, name: "month", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "day", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerBirthday>): PlayerBirthday {
        const message = { month: 0, day: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerBirthday>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerBirthday): PlayerBirthday {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 month */ 1:
                    message.month = reader.uint32();
                    break;
                case /* uint32 day */ 2:
                    message.day = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerBirthday, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 month = 1; */
        if (message.month !== 0)
            writer.tag(1, WireType.Varint).uint32(message.month);
        /* uint32 day = 2; */
        if (message.day !== 0)
            writer.tag(2, WireType.Varint).uint32(message.day);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.PlayerBirthday
 */
export const PlayerBirthday = new PlayerBirthday$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingTransaction$Type extends MessageType<PingTransaction> {
    constructor() {
        super("com.yonakaps.package.PingTransaction", [
            { no: 1, name: "creation_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "acknowledge_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "is_transaction_acked", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PingTransaction>): PingTransaction {
        const message = { creationTime: 0n, acknowledgeTime: 0n, isTransactionAcked: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingTransaction): PingTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 creation_time */ 1:
                    message.creationTime = reader.int64().toBigInt();
                    break;
                case /* int64 acknowledge_time */ 2:
                    message.acknowledgeTime = reader.int64().toBigInt();
                    break;
                case /* bool is_transaction_acked */ 4:
                    message.isTransactionAcked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 creation_time = 1; */
        if (message.creationTime !== 0n)
            writer.tag(1, WireType.Varint).int64(message.creationTime);
        /* int64 acknowledge_time = 2; */
        if (message.acknowledgeTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.acknowledgeTime);
        /* bool is_transaction_acked = 4; */
        if (message.isTransactionAcked !== false)
            writer.tag(4, WireType.Varint).bool(message.isTransactionAcked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.PingTransaction
 */
export const PingTransaction = new PingTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceBasicInfo$Type extends MessageType<ServiceBasicInfo> {
    constructor() {
        super("com.yonakaps.package.ServiceBasicInfo", [
            { no: 2, name: "is_alive", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "service_latency", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "service_type", kind: "enum", T: () => ["com.yonakaps.package.ServiceType", ServiceType, "SERVICE_TYPE_"] },
            { no: 4, name: "last_ping_transaction", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceBasicInfo>): ServiceBasicInfo {
        const message = { isAlive: false, serviceLatency: 0, serviceType: 0, lastPingTransaction: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServiceBasicInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceBasicInfo): ServiceBasicInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_alive */ 2:
                    message.isAlive = reader.bool();
                    break;
                case /* uint32 service_latency */ 1:
                    message.serviceLatency = reader.uint32();
                    break;
                case /* com.yonakaps.package.ServiceType service_type */ 3:
                    message.serviceType = reader.int32();
                    break;
                case /* uint64 last_ping_transaction */ 4:
                    message.lastPingTransaction = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceBasicInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_alive = 2; */
        if (message.isAlive !== false)
            writer.tag(2, WireType.Varint).bool(message.isAlive);
        /* uint32 service_latency = 1; */
        if (message.serviceLatency !== 0)
            writer.tag(1, WireType.Varint).uint32(message.serviceLatency);
        /* com.yonakaps.package.ServiceType service_type = 3; */
        if (message.serviceType !== 0)
            writer.tag(3, WireType.Varint).int32(message.serviceType);
        /* uint64 last_ping_transaction = 4; */
        if (message.lastPingTransaction !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.lastPingTransaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.ServiceBasicInfo
 */
export const ServiceBasicInfo = new ServiceBasicInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OperationalData$Type extends MessageType<OperationalData> {
    constructor() {
        super("com.yonakaps.package.OperationalData", [
            { no: 1, name: "memory_usage", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "process_environment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "memory_usage_percentage", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "overall_memory", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "dbgate_uptime", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "process_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<OperationalData>): OperationalData {
        const message = { memoryUsage: 0n, processEnvironment: "", memoryUsagePercentage: 0, overallMemory: 0n, dbgateUptime: 0n, processId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OperationalData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OperationalData): OperationalData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 memory_usage */ 1:
                    message.memoryUsage = reader.uint64().toBigInt();
                    break;
                case /* string process_environment */ 5:
                    message.processEnvironment = reader.string();
                    break;
                case /* uint32 memory_usage_percentage */ 2:
                    message.memoryUsagePercentage = reader.uint32();
                    break;
                case /* uint64 overall_memory */ 3:
                    message.overallMemory = reader.uint64().toBigInt();
                    break;
                case /* uint64 dbgate_uptime */ 6:
                    message.dbgateUptime = reader.uint64().toBigInt();
                    break;
                case /* uint32 process_id */ 4:
                    message.processId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OperationalData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 memory_usage = 1; */
        if (message.memoryUsage !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.memoryUsage);
        /* string process_environment = 5; */
        if (message.processEnvironment !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.processEnvironment);
        /* uint32 memory_usage_percentage = 2; */
        if (message.memoryUsagePercentage !== 0)
            writer.tag(2, WireType.Varint).uint32(message.memoryUsagePercentage);
        /* uint64 overall_memory = 3; */
        if (message.overallMemory !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.overallMemory);
        /* uint64 dbgate_uptime = 6; */
        if (message.dbgateUptime !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.dbgateUptime);
        /* uint32 process_id = 4; */
        if (message.processId !== 0)
            writer.tag(4, WireType.Varint).uint32(message.processId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.yonakaps.package.OperationalData
 */
export const OperationalData = new OperationalData$Type();
